import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class BOJ_1516 {
    /**
     * BOJ 1516 G3 게임 개발
     * 풀이: 위상 정렬
     */
    static BufferedReader br;
    static StringTokenizer st;
    static StringBuilder sb;

    static int N;
    static int[] edgeCnt;
    static int[] edgeValue;
    static ArrayList<ArrayList<Integer>> graph;

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        sb = new StringBuilder();

        N = Integer.parseInt(br.readLine());  //건물 종류의 수
        edgeCnt = new int[N+1];
        edgeValue = new int[N+1];
        graph = new ArrayList<>();
        for (int i = 0; i < N+1; i++) {
            graph.add(new ArrayList<>());
        }

        for (int i = 1; i <= N; i++) {
            st = new StringTokenizer(br.readLine());
            edgeValue[i] = Integer.parseInt(st.nextToken());
            while(true){
                int num = Integer.parseInt(st.nextToken());
                if(num == -1) break;
                graph.get(num).add(i);
                edgeCnt[i]++;
            }
        }

        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>();
        int[] resultValues = new int[N+1];
        for (int i = 1; i <= N; i++) {
            if(edgeCnt[i] == 0) priorityQueue.add(i);
            resultValues[i] = edgeValue[i];
        }



        while(!priorityQueue.isEmpty()) {
            int node = priorityQueue.poll();

            for (Integer i : graph.get(node)) {
                edgeCnt[i]--;
                resultValues[i] = Math.max(resultValues[i], resultValues[node] + edgeValue[i]);
                if (edgeCnt[i] == 0) priorityQueue.add(i);
            }
        }

        for (int i = 1; i < N+1; i++) {
            sb.append(resultValues[i]).append("\n");
        }
        System.out.println(sb);
    }
}
